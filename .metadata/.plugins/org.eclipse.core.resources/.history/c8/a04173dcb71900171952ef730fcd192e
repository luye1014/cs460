/*
 * JDBC.java -- A simple example of how to use Java and JDBC to
 * connect to an Oracle user's schema.
 *
 * At the time of this writing, the version of Oracle is 11.2g, and
 * the Oracle JDBC driver can be found at
 *   /opt/oracle/product/10.2.0/client/jdbc/lib/ojdbc14.jar
 * on the lectura system in the UofA CS dept.
 * (Yes, 10.2, not 11.2.  It's the correct jar file but in a strange location.)
 *
 * To compile and execute this program on lectura:
 *
 *   Add the Oracle JDBC driver to your CLASSPATH environment variable:
 *
 *         export CLASSPATH=/opt/oracle/product/10.2.0/client/jdbc/lib/ojdbc14.jar:${CLASSPATH}
 *
 *     (or whatever shell variable set-up you need to perform to add the
 *     JAR file to your Java CLASSPATH)
 *
 *   Compile this file:
 *
 *         javac JDBC.java
 *
 *   Finally, run the program:
 *
 *         java JDBC <oracle username> <oracle password>
 *
 * Author:  L. McCann (2008/11/19; updated 2015/10/28)
 */
/*=============================================================================
 |   Assignment: Program # 3
 |    File Name: Prog3.java
 |       Author: Lu Ye
 |
 |       Course: CSc 460 
 |   Instructor: L. McCann
 | Sect. Leader: Yawen Chen and Jacob Combs
 |     Due Date: Apirl 5th, 2017, at the beginning of class
 |
 |     Language:  Java
 |     Packages:  java.io
 |
 +-----------------------------------------------------------------------------
 |	Description: Part A  
 |		Embedding SQL within another programming language is nice for applications that require more
 |		And create it in the current directory.
 | 		Field types are limited to int, double, and String. All Strings field need to be padded to the needed length.
 |		For each column, all values must consume the same quantity of bytes. This is easy for numeric columns,
 |		but for String columns we donâ€™t want to waste storage. For those columns, you need to determine the
 |		number of characters in the longest value, and use that to size each value in the column for storage. This
 |		must be done for each execution of the program.
 |
 |	Techniques:  The program's steps are as follows:
 |   	Read text file name and transfer it to binary file
 |	   	Read file line by line except reading the first line
 |     	Sort the memory by the fourth field of each line
 |	    Dump data into binary file
 |
 |   Known Bugs:  None
 |
 *===========================================================================*/

import java.io.*;
import java.sql.*; // For access to the SQL interaction methods
import java.util.Scanner;

public class Prog3 {

	// primary key (School_EntityID)

	public static void main(String[] args) throws SQLException, IOException {

		final String oracleURL = // Magic lectura -> aloe access spell
				"jdbc:oracle:thin:@aloe.cs.arizona.edu:1521:oracle";

		String username = null, // Oracle DBMS username
				password = null; // Oracle DBMS password

		if (args.length == 2) { // get username/password from cmd line args
			username = args[0];
			password = args[1];
		} else {
			System.out.println("\nUsage:  java JDBC <username> <password>\n"
					+ "    where <username> is your Oracle DBMS" + " username,\n    and <password> is your Oracle"
					+ " password (not your system password).\n");
			System.exit(-1);
		}

		// load the (Oracle) JDBC driver by initializing its base
		// class, 'oracle.jdbc.OracleDriver'.
		try {
			Class.forName("oracle.jdbc.OracleDriver");

		} catch (ClassNotFoundException e) {
			System.err.println("*** ClassNotFoundException:  " + "Error loading Oracle JDBC driver.  \n"
					+ "\tPerhaps the driver is not on the Classpath?");
			System.exit(-1);

		}

		// make and return a database connection to the user's
		// Oracle database

		Connection dbconn = null;
		try {
			dbconn = DriverManager.getConnection(oracleURL, username, password);
		} catch (SQLException e) {
			System.err.println("*** SQLException:  " + "Could not open JDBC connection.");
			System.err.println("\tMessage:   " + e.getMessage());
			System.err.println("\tSQLState:  " + e.getSQLState());
			System.err.println("\tErrorCode: " + e.getErrorCode());
			System.exit(-1);
		}

		// Send the query to the DBMS, and get and display the results
		String mainQuery = "Main menu: \n"
				+ "q1: Find High School in the list... \n"
				+ "q2: Display Charter School...\n"
				+ "q3: Based on County in 2014, display top ten school...\n"
				+ "q4: Display School name in Pima area...\n"
				+ "Please Type q1, q2, q3 or q4 for specific query. Or you can input \"quit\" to end the program.\n"
				+ "=========================================================================================================";
		Scanner keyboard = new Scanner(System.in); // your input
		boolean working = true;
		while (working) {
			System.out.println(mainQuery);
			switch (keyboard.next()) {
			case "q1":
				// to do case 1 for query 1
				System.out.println("How many High Schools are listed in the results? Choose a year from 2010 to 2014.\n"
						+ "Or you can input quit1 and go back to main menu.");
				while (keyboard.hasNext()) {
					String year = keyboard.next();
					if (year.equals("quit1")) {
						break;
					}
					if (year.equals("2010") || year.equals("2011") || year.equals("2012") || year.equals("2013")
							|| year.equals("2014")) {
						Query1(dbconn, year);
					} else {
						System.out.println(
								"You input a wrong year or wrong command. Please reinput or Input \"quit1\" and go back to main menu.");
						System.out.println("============================");
					}
				}
				break;
			case "q2":
				System.out.println("For each of the five years, display the num of charter schools and how many of"
						+ "them had a sum of the Math percentages \"Falls Far Below\" and \"Approaches\" that was"
						+ "less than the percent \"Passing\"\n" + "You can quit2 to end query Q2.");
				Query2(dbconn);
				System.out.println();
				System.out.println("Input \"quit2\" and go back to main menu.");
				System.out.println("============================");
				while (keyboard.hasNext()) {
					if (keyboard.next().equals("quit2")) {
						break;
					}else{
						System.out.println("Input \"quit2\" and go back to main menu.");
						System.out.println("============================");
						
					}
				}
				break;
			case "q3":
				System.out.println("For each county in 2014, which 10 schools had the greatest differences between the"
						+ "Passing percentages in reading and writing? Display one table for each county that includes position number."
						+ "'1' for the school with biggest difference and duplicate position numbers for ties.");
				Query3(dbconn);
				System.out.println();
				System.out.println("Input \"quit3\" and go back to main menu.");
				System.out.println("============================");
				while (keyboard.hasNext()) {
					if (keyboard.next().equals("quit3")) {
						break;
					}else{
						System.out.println(
								"Input \"quit3\" and go back to main menu.");
						System.out.println("============================");
						
					}
				}
				break;
			case "q4":
				// to do case 4 for query 4
				System.out.println("Choose whether a Charter School or not (Input Y or N, both Capital), "
						+ "For School Entity ID in 2014, which school's sum of Writing mean percentage and "
						+ "Reading mean percentage is greater than sum of Science "
						+ "mean percentage and Math mean percentage?");
				while (keyboard.hasNext()) {
					String YorN = keyboard.next();
					if (YorN.equals("quit4")) {
						break;
					}
					if (YorN.equals("Y") || YorN.equals("N")) {
						Query4(dbconn, YorN);
						System.out.println("Keep inserting an year or insert \"quit4\" to go back main menu.");
						System.out.println("============================");
					} else {
						System.out.println(
								"You input a wrong command. Please reinput or Input \"quit4\" and go back to main menu.");
						System.out.println("============================");
					}
				}
				break;
			case "quit":
				working = false;
				break;
			default:
				System.out.println("You insert wrong command, follow the instruction. \n"
						+ "Please Type q1, q2, q3 or q4 for specific query.\n Or input quit to end.");
			}
		}

	}

	private static void Query4(Connection dbconn, String yorN) {
		Statement stmt = null;
		ResultSet answer = null;
		try {
			String query = "select School_Name, School_EntityID from (select School_Name, School_EntityID, "
					+ "Math_mean+Science_mean as sum from luye.AIMS2014 where Math_mean > 0 and Science_mean > 0 and S_charter "
					+ "= '" + yorN + "' and County = 'Pima' order by sum desc) where rownum <=10";
			
            stmt = dbconn.createStatement();
            answer = stmt.executeQuery(query);

            if (answer != null) {
              
                    // Get the data about the query result to learn
                    // the attribute names and use them as column headers

                ResultSetMetaData answermetadata = answer.getMetaData();

                for (int i = 1; i <= answermetadata.getColumnCount(); i++) {
                    System.out.print(answermetadata.getColumnName(i) + "\t\t\t\t");
                }
                System.out.println();
                System.out.println("---------------------------------------------------------------------------");

                    // Use next() to advance cursor through the result
                    // tuples and print their attribute values

                while (answer.next()) {
					String sname = answer.getString("School_Name");
					int maxL = 60;
					for (int i = sname.length(); i <= maxL; i++) {
						sname += " ";
					}
                    System.out.println(sname + "\t\t"
                        + answer.getInt("School_EntityID"));
                }
            }
            System.out.println();

        } catch (SQLException e) {

                System.err.println("*** SQLException:  "
                    + "Could not fetch query results.");
                System.err.println("\tMessage:   " + e.getMessage());
                System.err.println("\tSQLState:  " + e.getSQLState());
                System.err.println("\tErrorCode: " + e.getErrorCode());
                System.exit(-1);

        }
		

	}

	private static void Query3(Connection dbconn) {
		Statement stmt = null;
		ResultSet CountyList = null;
		try {
			String queryForCL = "select distinct county from luye.AIMS2014 order by county";
			stmt = dbconn.createStatement();
			CountyList = stmt.executeQuery(queryForCL);

			if (CountyList != null) {

				while (CountyList.next()) {
					String curCounty = CountyList.getString("County");
					System.out.println();
					System.out.println(curCounty);
					System.out.println("==============");
					System.out.println();
					Statement stmt2 = null;
					ResultSet answer = null;
					String query = "select School_Name, Reading_PercPassing, Writing_PercPassing, abs_difference "
							+ "from("
							+ "select Reading_PercPassing, Writing_PercPassing, School_Name, abs(Reading_PercPassing-Writing_PercPassing) as abs_difference "
							+ "from  luye.AIMS2014 "
							+ "where Reading_PercPassing > 0 and Writing_PercPassing > 0 and County = '" + curCounty
							+ "' order by abs_difference desc) where rownum <= 10";
					// System.out.println(query);
					stmt2 = dbconn.createStatement();
					answer = stmt2.executeQuery(query);

					// added postion column
					System.out.print(" POS  ");
					ResultSetMetaData answermetadata = answer.getMetaData();
					for (int i = 1; i <= answermetadata.getColumnCount(); i++) {
						System.out.print("   \t\t " + answermetadata.getColumnName(i) + "  ");
					}
					System.out.println();
					System.out.println("----------------------------------------------"
							+ "-------------------------------------------------------------------------"
							+ "-------------------------------------------------");

					int pos = 1;
					int temp = 1;
					while (answer.next()) {
						if (temp != 1 && temp != answer.getInt("abs_difference")) {
							pos++;
						}
						String sname = answer.getString("School_Name");
						int maxL = 60;
						for (int i = sname.length(); i <= maxL; i++) {
							sname += " ";
						}
						String formatP = "";
						if (pos < 10) {
							formatP = pos + "  \t";
						} else {
							formatP = pos + " \t";
						}
						System.out.println(" " + formatP + sname + answer.getInt("Reading_PercPassing") + "  \t\t\t\t "
								+ answer.getInt("Writing_PercPassing") + "  \t\t\t\t "
								+ answer.getInt("abs_difference"));
						temp = answer.getInt("abs_difference");
					}
					System.out.println();
				}
			}
		} catch (SQLException e) {
			System.err.println("*** SQLException:  " + "Could not fetch query results.");
			System.err.println("\tMessage:   " + e.getMessage());
			System.err.println("\tSQLState:  " + e.getSQLState());
			System.err.println("\tErrorCode: " + e.getErrorCode());
			System.exit(-1);
		}

	}

	private static void Query2(Connection dbconn) {
		Statement stmt = null;
		ResultSet answer = null;
		int counter = 0, counter2 = 0;
		try {
			int year;
			for (year = 2010; year < 2015; year++) {
				String subQuery1 = "select School_EntityID from luye.AIMS" + year + " where S_charter = 'Y'";
				stmt = dbconn.createStatement();
				answer = stmt.executeQuery(subQuery1);
				if (answer != null) {
					while (answer.next()) {
						counter++;
					}
				}
				System.out.println("The number of Charter Schools for " + year + ":" + counter);
				counter = 0;

				// Sub query 2 of query 2

				String subQuery2 = "select Sum, Math_PercPassing from (select Math_PercPassing, "
						+ "Math_PercFallsFarBelow + Math_PercApproaches as Sum from luye.AIMS" + year
						+ " where S_charter = 'Y' ) where Sum < Math_PercPassing and Sum > 0"
						+ " and Math_PercPassing > 0";
				stmt = dbconn.createStatement();
				answer = stmt.executeQuery(subQuery2);
				if (answer != null) {
					while (answer.next()) {
						counter2++;
					}
				}
				System.out.println("The number of Charter Schools where the sum of math percentages "
						+ "falls far below and approaches is less than the percentage of passing " + year + ":"
						+ counter2);
				counter2 = 0;

			}
		} catch (SQLException e) {

			System.err.println("*** SQLException:  " + "Could not fetch query results.");
			System.err.println("\tMessage:   " + e.getMessage());
			System.err.println("\tSQLState:  " + e.getSQLState());
			System.err.println("\tErrorCode: " + e.getErrorCode());
			System.exit(-1);
		}

	}

	private static void Query1(Connection dbconn, String year) {
		Statement stmt = null;
		ResultSet answer = null;
		int counter = 0;
		String query = "select distinct School_Name from AIMS" + year + " where School_"
				+ "Name like '%High_School%' and School_name not like '%Junior_High_School%'";
		try {
			stmt = dbconn.createStatement();
			answer = stmt.executeQuery(query);
			if (answer != null) {
				System.out.print("alert: The definition for Junior High School here is any name contains \"Junior High School\".");
				System.out.println("\nThe results of the query \n[" + query + "] are:\n");
				while (answer.next()) {
					counter++;
				}
			}
			System.out.println("The num of High School for AIMS" + year + " is " + counter + ".");
			System.out.println();
			System.out.println("Keep inserting an year or insert \"quit1\" to go back main menu.");
			System.out.println("============================");
		} catch (SQLException e) {
			System.err.println("*** SQLException:  " + "Could not fetch query results.");
			System.err.println("\tMessage:   " + e.getMessage());
			System.err.println("\tSQLState:  " + e.getSQLState());
			System.err.println("\tErrorCode: " + e.getErrorCode());
			System.exit(-1);

		}

	}
}
